CREATE database IF NOT EXISTS bank_loan_db;

use bank_loan_db;

CREATE TABLE loan_data (
    id INT,
    address_state VARCHAR(5),
    application_type VARCHAR(50),
    emp_length VARCHAR(20),
    emp_title VARCHAR(100),
    grade CHAR(1),
    home_ownership VARCHAR(50),
    issue_date DATE,
    last_credit_pull_date DATE,
    last_payment_date DATE,
    loan_status VARCHAR(50),
    next_payment_date DATE,
    member_id INT,
    purpose VARCHAR(50),
    sub_grade VARCHAR(5),
    term VARCHAR(20),
    verification_status VARCHAR(50),
    annual_income DECIMAL(12,2),
    dti DECIMAL(10,4),
    installment DECIMAL(10,2),
    int_rate DECIMAL(10,4),
    loan_amount DECIMAL(12,2),
    total_acc INT,
    total_payment DECIMAL(12,2)
);


select *
from loan_data;


LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/financial_loan.csv'
INTO TABLE loan_data
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS;




SHOW VARIABLES LIKE 'secure_file_priv';




SELECT *
FROM LOAN_DATA;


SELECT COUNT(*) 
FROM LOAN_DATA;



-- Key Performance Indicators (KPIs) Requirements:
-- (1). Total Loan Applications
SELECT COUNT(*) AS TOTAL_LOAN_APPLICATION
FROM LOAN_DATA;



-- (*).	MTD Total Loan Applications
SELECT COUNT(*) AS MTD_TOTAL_LOAN_APPLICATION
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12 AND YEAR(ISSUE_DATE) IN (2021);


-- (*). PMTD Total Loan Applications
SELECT COUNT(*) AS PMTD_TOTAL_LOAN_APPLICATION
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11 AND YEAR(ISSUE_DATE) IN (2021);


-- (2). Total Funded Amount
SELECT SUM(LOAN_AMOUNT) AS Total_Funded_Amount
FROM LOAN_DATA;


-- (*). MTD Total Funded Amount
SELECT SUM(LOAN_AMOUNT) AS MTD_Total_Funded_Amount
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12 AND YEAR(ISSUE_DATE) IN (2021);


-- (*). PMTD Total Funded Amount
SELECT SUM(LOAN_AMOUNT) AS MTD_Total_Funded_Amount
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11 AND YEAR(ISSUE_DATE) IN (2021);


-- (3). Total Amount Received
SELECT SUM(TOTAL_PAYMENT) AS Total_Amount_Received
FROM LOAN_DATA;


-- (*). MTD Total Recieved Amount
SELECT SUM(TOTAL_PAYMENT) AS MTD_Total_Amount_Received
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12 AND YEAR(ISSUE_DATE) IN (2021);


-- (*). PMTD Total Recieved Amount
SELECT SUM(TOTAL_PAYMENT) AS MTD_Total_Amount_Received
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11 AND YEAR(ISSUE_DATE) IN (2021);


-- (4). Average Interest Rate
SELECT AVG(INT_RATE) * 100 AS AVG_INTEREST_RATE
FROM LOAN_DATA;


-- (*). MTD Average Interest Rate
SELECT AVG(INT_RATE) * 100 AS AVG_INTEREST_RATE
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12;



-- (*). PMTD Interest Rate
SELECT AVG(INT_RATE) * 100 AS AVG_INTEREST_RATE
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11;


-- (5). Average DTI ratio
SELECT AVG(DTI)*100 AS Avg_DTI
FROM LOAN_DATA;


-- (6). MTD Average DTI ratio
SELECT AVG(DTI)*100 AS Avg_DTI
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12;

-- (*). PMTD Average DTI ratio
SELECT AVG(DTI)*100 AS Avg_DTI
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11;

--------------------------------------------------------------

-- Good Loan Issued


-- (1). Good Loan percentage
SELECT (COUNT(CASE WHEN LOAN_STATUS = 'FULLY PAID' OR LOAN_STATUS = 'CURRENT' THEN ID END)*100.0)
/ COUNT(ID) AS GOOD_LOAN_PERCENTAGE
FROM LOAN_DATA;


-- (2). Good Loan Application
SELECT COUNT(ID) AS GOOD_LOAN_APPLICATIONS
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('FULLY PAID') OR ('CURRENT');


-- (3). Good Loan Funded Amount
SELECT SUM(LOAN_AMOUNT) AS GOOD_LOAN_FUNDED_AMOUNT 
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('fully paid') OR ('current');


-- (4). Good Loan Amount Received 
SELECT SUM(TOTAL_PAYMENT) AS GOOD_LOAN_RECEIVED_AMOUNT 
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('fully paid') OR ('current');



------------------------------------------------------------------
-- BAD LOAN ISSUE


-- (1).  Bad Loan Percentage
SELECT (COUNT(CASE WHEN LOAN_STATUS = 'CHARGED OFF' THEN ID END) * 100.0) / 
COUNT(ID) AS BAD_LOAN_PERCENTAGE
FROM LOAN_DATA;


-- (2). Bad Loan Applications
SELECT COUNT(*) AS Bad_Loan_Applications
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('CHARGED OFF');


-- (3). Bad Loan Funded Amount
SELECT SUM(LOAN_AMOUNT) AS BAD_LOAN_FUNDED_AMOUNT
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('CHARGED OFF');


-- (4). Bad Loan Amount Received 
SELECT SUM(TOTAL_PAYMENT) AS BAD_LOAN_AMOUNT_RECEIVED
FROM LOAN_DATA
WHERE LOAN_STATUS IN ('CHARGED OFF');



---------------------------------------------------------------------------
-- Loan Status

SELECT LOAN_STATUS,
COUNT(ID) AS LOAN_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED,
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
AVG(INT_RATE * 100) AS INTEREST_RATE,
AVG(DTI * 100) AS DTI
FROM LOAN_DATA
GROUP BY LOAN_STATUS;




SELECT 
LOAN_STATUS,
SUM(TOTAL_PAYMENT) AS MTD_TOTAL_AMOUNT_RECEIVED,
SUM(LOAN_AMOUNT) AS MTD_TOTAL_FUNDED_AMOUNT
FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) IN (12)
GROUP BY LOAN_STATUS;




-- B.	BANK LOAN REPORT | OVERVIEW

-- MONTH

SELECT 
    MONTH(ISSUE_DATE) AS MONTH_NUMBER,
    MONTHNAME(ISSUE_DATE) AS MONTH_NAME,
    COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
    SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
    SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATA
GROUP BY MONTH(ISSUE_DATE), MONTHNAME(ISSUE_DATE)
ORDER BY MONTH(ISSUE_DATE);



-- STATE

SELECT ADDRESS_STATE AS STATE,
COUNT(ID) AS TOTAL_LOAN_APPLICATIONS, 
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATA
GROUP BY ADDRESS_STATE
ORDER BY ADDRESS_STATE;





-- TERM
SELECT DISTINCT TERM
FROM LOAN_DATA;

SELECT TERM AS TERM, 
COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECIEVED
FROM LOAN_DATA
GROUP BY TERM
ORDER BY TERM;

-- EMPLOYEE LENGTH

SELECT DISTINCT EMP_LENGTH
FROM LOAN_DATA;

SELECT EMP_LENGTH AS EMPLOYEE_LENGTH,
COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECIEVED
FROM LOAN_DATA
GROUP BY EMP_LENGTH
ORDER BY EMP_LENGTH;



-- PURPOSE

SELECT DISTINCT PURPOSE
FROM LOAN_DATA;

SELECT PURPOSE AS PURPOSE,
COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECIEVED
FROM LOAN_DATA
GROUP BY PURPOSE
ORDER BY PURPOSE;



-- HOME OWNERSHIP
SELECT HOME_OWNERSHIP AS HOME_OWNERSHIP,
COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMOUNT,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECIEVED
FROM LOAN_DATA
GROUP BY HOME_OWNERSHIP
ORDER BY HOME_OWNERSHIP;